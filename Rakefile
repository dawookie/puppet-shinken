require 'rubygems'
require 'puppetlabs_spec_helper/rake_tasks'
require 'puppet-lint'

require 'rake'
require 'rspec/core/rake_task'

exclude_paths = ["pkg/**/*", "vendor/**/*", "spec/**/*"]

# Basic controls generated by the command rspec-puppet-init
desc "Run all RSpec code examples"
RSpec::Core::RakeTask.new(:rspec) do |t|
  t.rspec_opts = File.read("spec/spec.opts").chomp || ""
end

SPEC_SUITES = (Dir.entries('spec') - ['.', '..','fixtures']).select {|e| File.directory? "spec/#{e}" }
namespace :rspec do
  SPEC_SUITES.each do |suite|
    desc "Run #{suite} RSpec code examples"
    RSpec::Core::RakeTask.new(suite) do |t|
      t.pattern = "spec/#{suite}/**/*_spec.rb"
      t.rspec_opts = File.read("spec/spec.opts").chomp || ""
    end
  end
end
task :default => :rspec

begin
  if Gem::Specification::find_by_name('puppet-lint')
    require 'puppet-lint/tasks/puppet-lint'
    PuppetLint.configuration.ignore_paths = ["spec/**/*.pp", "vendor/**/*.pp"]
    PuppetLint.configuration.log_format   = "%{path}:%{linenumber}:%{check}:%{KIND}:%{message}"
    task :default => [:rspec, :lint]
  end
rescue Gem::LoadError
end

# Basic controls generated by the command puppet module generate
desc "Validate manifests, templates, and ruby files"
task :validate do
  Dir['manifests/**/*.pp'].each do |manifest|
    sh "puppet parser validate --noop #{manifest}"
  end
  Dir['spec/**/*.rb','lib/**/*.rb'].each do |ruby_file|
    sh "ruby -c #{ruby_file}" unless ruby_file =~ /spec\/fixtures/
  end
  Dir['templates/**/*.erb'].each do |template|
    sh "erb -P -x -T '-' #{template} | ruby -c"
  end
end

# Templates
desc "Verify puppet templates"
task :template do

  files = FileList["**/*.erb"]
  files.reject! { |f| File.directory?(f) }
  files = files.exclude(exclude_paths)

  files.each do |erb_file|
    result = `erb -P -x -T '-' #{erb_file} | ruby -c`
    puts "Verifying #{erb_file}.... #{result}"

  end

end